import serial
import time
import joblib
import numpy as np
import threading
import sys
from collections import deque

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
INPUT_PORT = 'COM10'
OUTPUT_PORT = 'COM11'
BAUD = 115200
WINDOW_SIZE = 5

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π ===
roll_model = joblib.load("roll_model.joblib")
pitch_model = joblib.load("pitch_model.joblib")

# === –ë—É—Ñ–µ—Ä–∏ –¥–ª—è –∫–æ–≤–∑–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ ===
roll_buffer = deque(maxlen=WINDOW_SIZE)
pitch_buffer = deque(maxlen=WINDOW_SIZE)

# === –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—Ä—Ç—ñ–≤ ===
ser_in = serial.Serial(INPUT_PORT, BAUD, timeout=1)
ser_out = serial.Serial(OUTPUT_PORT, BAUD)

time.sleep(2)
print("üîå –ó'—î–¥–Ω–∞–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö... (–Ω–∞—Ç–∏—Å–Ω–∏ Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É)")

# === Ctrl+C –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ===
def listen_exit():
    try:
        while True:
            time.sleep(0.1)
    except KeyboardInterrupt:
        print("\nüö™ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è...")
        ser_in.close()
        ser_out.close()
        sys.exit()

threading.Thread(target=listen_exit, daemon=True).start()

# === –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª ===
while True:
    try:
        line = ser_in.readline().decode().strip()
        if ',' in line:
            try:
                roll, pitch = map(float, line.split(',')[:2])
                roll_buffer.append(roll)
                pitch_buffer.append(pitch)

                if len(roll_buffer) == WINDOW_SIZE:
                    roll_input = np.array(roll_buffer).reshape(1, -1)
                    pitch_input = np.array(pitch_buffer).reshape(1, -1)

                    roll_filtered = roll_model.predict(roll_input)[0]
                    pitch_filtered = pitch_model.predict(pitch_input)[0]
                else:
                    # –ü–æ–∫–∏ –±—É—Ñ–µ—Ä –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏—Ä—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                    roll_filtered = roll
                    pitch_filtered = pitch

                output_str = f"{roll_filtered:.2f},{pitch_filtered:.2f}\n"
                ser_out.write(output_str.encode())
                print("üì§", output_str.strip())

            except ValueError as e:
                print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É:", e)
                continue
    except Exception as e:
        print("‚ùå", e)
        break
